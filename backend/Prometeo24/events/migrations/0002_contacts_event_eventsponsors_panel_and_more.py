# Generated by Django 4.2.6 on 2023-11-07 08:52

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contacts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('email', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, unique=True, verbose_name='Event Name')),
                ('speaker', models.CharField(blank=True, max_length=50, null=True, verbose_name="If Talk mention speaker's name (Else leave empty)")),
                ('designation', models.CharField(blank=True, max_length=200, null=True, verbose_name='Speaker Designation (only for Talk)')),
                ('image', models.ImageField(upload_to='images/', verbose_name='Cover Image(prefer uploading square images)(for speakers upload images with more padding, i.e, face in the center)')),
                ('rulebook', models.FileField(blank=True, null=True, upload_to='rulebooks/', verbose_name='Rulebook File')),
                ('problem_statement', ckeditor.fields.RichTextField(blank=True, max_length=5000000, null=True, verbose_name='Problem Statement')),
                ('sponsor_image1', models.ImageField(blank=True, upload_to='images/', verbose_name='Sponser Image 1(upload rectangular images)')),
                ('sponsor_website', models.URLField(blank=True, max_length=1000, null=True, verbose_name='Link to Sponsors Website')),
                ('participation_type', models.CharField(choices=[('individual', 'Individual Event'), ('team', 'Team Event')], default='individual', max_length=25, verbose_name='Participation Type')),
                ('min_team_size', models.IntegerField(default=1, verbose_name='Minimum Team Size (leave unchanged for individual event)')),
                ('max_team_size', models.IntegerField(default=1, verbose_name='Maximum Team Size (leave unchanged for individual event)')),
                ('prize', models.CharField(blank=True, default='Prize <Enter prize money here> INR', max_length=200, null=True, verbose_name='Prize Money (Rs.)')),
                ('description', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Event Description (not for Poster Presentation)')),
                ('poster_description', ckeditor.fields.RichTextField(blank=True, max_length=5000, null=True, verbose_name='Poster Presentation Description')),
                ('host', models.CharField(blank=True, max_length=50, null=True, verbose_name='Event Host')),
                ('external_link', models.URLField(blank=True, max_length=500, null=True, verbose_name='External Link for Registration')),
                ('date', models.DateField(default='2023-01-01', verbose_name='Event Date (Leave unchanged if the date is not decided)')),
                ('time', models.TimeField(verbose_name='Event Time')),
                ('end_date', models.DateField(default='2023-01-01', verbose_name='Event end Date')),
                ('end_time', models.TimeField(verbose_name='Event end Time')),
                ('venue', models.CharField(blank=True, max_length=50, null=True, verbose_name='Event Venue')),
                ('registration_open', models.BooleanField(blank=True, default=True, verbose_name='Registrations Open')),
                ('type', models.CharField(choices=[('technical', 'Technical'), ('workshop', 'Workshop'), ('informal', 'Informal'), ('exhibition', 'Exhibition'), ('talk', 'Talk'), ('panel_discussion', 'Panel Discussion'), ('initiative', 'Initiative'), ('entrepreneurial', 'Entrepreneurial'), ('poster_presentation', 'Poster Presentation')], default='event', max_length=30, verbose_name='Event Type')),
                ('event_started', models.BooleanField(blank=True, default=False, verbose_name='Event started')),
                ('meet_link', models.URLField(blank=True, max_length=500, null=True, verbose_name='meet Link for streaming')),
                ('youtube_link', models.URLField(blank=True, max_length=500, null=True, verbose_name='youtube Link for streaming')),
                ('webx_link', models.URLField(blank=True, max_length=500, null=True, verbose_name='webX Link for streaming')),
                ('featured', models.BooleanField(blank=True, default=False, verbose_name='Display on home page')),
                ('rank', models.IntegerField(default=1)),
                ('hidden', models.BooleanField(blank=True, default=False, verbose_name='Hide Event')),
                ('presentation_template', models.URLField(blank=True, null=True, verbose_name='presentation template download link for poster presentations')),
                ('sample_poster', models.URLField(blank=True, null=True, verbose_name='sample poster download link for poster presentations')),
                ('submissions_started', models.BooleanField(blank=True, default=False, verbose_name='User can upload their submissions')),
                ('submission_link', models.URLField(blank=True, max_length=500, null=True, verbose_name='Event submission link')),
                ('material_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Material Name')),
                ('material', models.FileField(blank=True, null=True, upload_to='supplementaryMaterials/', verbose_name='Supplementary Material')),
            ],
        ),
        migrations.CreateModel(
            name='EventSponsors',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Name')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/sponsors/', verbose_name='Sponser Image (upload rectangular images)')),
                ('website', models.URLField(blank=True, max_length=1000, null=True, verbose_name='Link to Sponsors Website')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_sponsors', to='events.event')),
            ],
        ),
        migrations.CreateModel(
            name='Panel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('designation', models.CharField(max_length=50)),
                ('image', models.ImageField(upload_to='images/panelist/', verbose_name='Panelist image')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='panel', to='events.event')),
            ],
        ),
        migrations.DeleteModel(
            name='EventDetail',
        ),
        migrations.AddField(
            model_name='contacts',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.event'),
        ),
    ]
